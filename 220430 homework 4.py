# 1. Реализовать скрипт, в котором должна быть предусмотрена функция 
# расчёта заработной платы сотрудника. Используйте в нём формулу: 
# (выработка в часах*ставка в час) + премия. Во время выполнения расчёта 
# для конкретных значений необходимо запускать скрипт с параметрами.
my_file = open("Skript_wage.py", "w+") # Наполняем скрипт
my_file.write("from sys import argv\nscript_name, \
x1, x2, x3 = argv\ndef wage_calc(x1, x2, x3):\
\n    return int(x1)*int(x2) + int(x3)\
\nprint(script_name)\
\nprint('Wage: ',wage_calc(x1, x2, x3))")
my_file.close()
# для запуска в CMD 
# вводим соответственно имя скрипта, часы, ставку в час, премию
# например, python Skript_wage.py 2 3 1
# Содержимое скрипта Skript_wage.py:
from sys import argv
script_name, x1, x2, x3 = argv
def wage_calc(x1, x2, x3):
    return int(x1)*int(x2) + int(x3)
print(script_name)
print('Wage: ',wage_calc(x1, x2, x3))

######################################################################
# 2. Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
# Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].
date_2 = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list2 = [date_2[x+1] for x in range(len(date_2)-1) if date_2[x+1] > date_2[x]]
print(new_list2)

#######################################################################
# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. 
# Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.
my_dict3 = [el for el in range(20, 241) if (el % 20 ==0) or (el % 21 ==0)] 
print(my_dict3)


#######################################################################
# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию. 
# Элементы выведите в порядке их следования в исходном списке. Для выполнения 
# задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
from collections import Counter
date_4 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
c = Counter(date_4)
new_list4 = [el for el in date_4 if c[el] == 1]
print(new_list4)

########################################################################
# 5. Реализовать формирование списка, используя функцию range() и 
# возможности генератора. В список должны войти чётные числа от 100 до 1000
# (включая границы). Нужно получить результат вычисления произведения всех 
# элементов списка.
# Подсказка: использовать функцию reduce().
my_dict5 = [el for el in range(100, 1001) if (el % 2 ==0)]
from functools import reduce
def my_func5 (prev_el, el):
    return prev_el * el
print(reduce(my_func5, my_dict5))

#######################################################################
# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого 
# заранее. 
# Подсказка: используйте функцию count() и cycle() модуля itertools. 
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
# Предусмотрите условие его завершения. 
#### Например, в первом задании 
# выводим целые числа, начиная с 3. При достижении числа 10 — завершаем 
# цикл. Вторым пунктом необходимо предусмотреть условие, при котором 
# повторение элементов списка прекратится.

#скрипт №1
my_file = open("gen_num_line.py", "w+") # Наполняем скрипт №1
my_file.write("import sys\
\ndef gen_num_line(x1, x2):\
\n    from itertools import count\
\n    list6=[]\
\n    for i in count(x1):\
\n        list6.append(i)\
\n        if i >= x2:\
\n            break\
\n    return list6\
\nlist6 = gen_num_line(int(sys.argv[1]), int(sys.argv[2]))\
\nprint(list6)")
my_file.close()
# для запуска в CMD 
# вводим соответственно имя скрипта, первое число, замыкающее число
# например, python gen_num_line.py 3 10
# Cодержимое скрипта №1 gen_num_line.py
import sys
def gen_num_line(x1, x2):
    from itertools import count
    list6=[]
    for i in count(x1):
        list6.append(i)
        if i >= x2:
            break
    return list6
list6 = gen_num_line(int(sys.argv[1]), int(sys.argv[2]))
print(list6)

#скрипт №2
my_file = open("rep_num_line.py", "w+") # Наполняем скрипт №2
my_file.write("import sys\
\nimport ast\
\nlist6 = ast.literal_eval(sys.argv[1])\
\ndef rep_num_line(list6):\
\n    def cycle(list6):\
\n        while True:\
\n            for i in list6:\
\n                yield i\
\n                yield i\
\n    b = len(list6)*2\
\n    list61=[]\
\n    while b != 0:\
\n        for i in cycle(list6):\
\n            list61.append(i)\
\n            b = b - 1\
\n            if b == 0:\
\n                break\
\n    return list61\
\nlist61 = rep_num_line(list6)\
\nprint(list61)")        
my_file.close()
# для запуска в CMD 
# вводим соответственно имя скрипта, список
# например, python rep_num_line.py "[3, 4, 5, 6, 7, 8, 9, 10]"
# Cодержимое скрипта №2 rep_num_line.py
import sys
import ast
list6 = ast.literal_eval(sys.argv[1])
def rep_num_line(list6):
    def cycle(list6):
        while True:
            for i in list6:
                yield i
                yield i
    b = len(list6)*2
    list61=[]
    while b != 0:
        for i in cycle(list6):
            list61.append(i)
            b = b - 1
            if b == 0:
                break
    return list61
list61 = rep_num_line(list6)
print(list61)
    
#######################################################################
# 7. Реализовать генератор с помощью функции с ключевым словом yield, 
# создающим очередное значение. При вызове функции должен создаваться 
# объект-генератор. Функция вызывается следующим образом: for el in fact(n). 
# Она отвечает за получение факториала числа. В цикле нужно выводить 
# только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. 
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.     
def fact(n):
    for i in range(1, n+1):
        yield i
a = 1
n = int(input('Введите число "n" '))
for el in fact(n):
        a *= el
print('Факториал числа "n" равен ', a)        
#####################################################################









