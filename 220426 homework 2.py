# 1. Создать список и заполнить его элементами различных типов данных. 
# Реализовать скрипт проверки типа данных каждого элемента. 
# Использовать функцию type() для проверки типа. 
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

my_list1 = ['Летели', 2, 'напильника', 1, 0.1280, 'другой на', None]
my_list1.reverse()
a = len(my_list1)
while a >= 1:
    a = a - 1
    print(type(my_list1[a]))
my_list1.reverse()    

########################################################################
#2. Для списка реализовать обмен значений соседних элементов. 
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д. 
# При нечётном количестве элементов последний сохранить на своём месте. 
# Для заполнения списка элементов нужно использовать функцию input().

      
my_list2 = input('Введите что-нибудь... '); 
my_list_rev = ''
symbol = list(my_list2)
for el in range(0, len(my_list2)-1, 2):
    tmp = symbol[el]
    symbol[el] = symbol[el+1]
    symbol[el+1] = tmp
    my_list_rev = ''.join(symbol)
print(my_list_rev)
       

##########################################################################
# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. 
# Сообщить, к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и dict.
key = int(input('Введите порядковый номер месяца года... '))
d = [[1,'зима'], [2,'зима'], [3,'весна'], [4,'весна'], [5,'весна'],\
     [6,'лето'], [7,'лето'], [8,'лето'], [9,'осень'], [10,'осень'],\
         [11,'осень'], [12,'зима']]
t = dict(d)
print(t.get(key)) 


##########################################################################
# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. 
# Вывести каждое слово с новой строки. Строки нужно пронумеровать. 
# Если слово длинное, выводить только первые 10 букв в слове.
v = input('Введите строку из нескольких слов, разделенных пробелами... ')
v = v.split()
a = 0
for el in v:
    a = a +1
    print(f'{a}. {el[:10]}')


#########################################################################
# 5. Реализовать структуру «Рейтинг», представляющую собой набор 
# натуральных чисел, который не возрастает. У пользователя нужно 
# запрашивать новый элемент рейтинга. Если в рейтинге существуют 
# элементы с одинаковыми значениями, то новый элемент с тем же значением 
# должен разместиться после них.
my_list = [7, 5, 3, 3, 2]
w = int(input('Введите число рейтинга...'))
my_list2 = my_list
my_list2.append(w)
my_list2.sort()
my_list2.reverse()
print (my_list2)






