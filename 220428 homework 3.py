# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) 
# и выполняющую их деление. Числа запрашивать у пользователя, 
# предусмотреть обработку ситуации деления на ноль.

def div_two_num (arg_1, arg_2):
    return arg_1 / arg_2
arg_1 = int(input('Введите первое делимое число... '))
arg_2 = int(input('Введите число делитель... '))
if arg_2 == 0:
    print('Деление на ноль невозможно ') 
else:
    print('Результат деления... ', div_two_num(arg_1, arg_2))

#####################################################################
# 2. Выполнить функцию, которая принимает несколько параметров, 
# описывающих данные пользователя: имя, фамилия, год рождения, город 
# проживания, email, телефон. Функция должна принимать параметры как 
# именованные аргументы. Осуществить вывод данных о пользователе одной 
# строкой.

def Notebook(first_name=None, last_name=None, year_of_birth=None,\
                 city_of_residence=None, email=None, phone=None):
    first_name = input('Введите имя... ')
    last_name = input('Введите фамилию... ')
    year_of_birth = input('Введите год рождения... ')
    city_of_residence = input('Введите город проживания... ')
    email = input('Введите email... ')
    phone = input('Введите телефон... ')
    print("\n Имя: " + first_name, ", фамилия: " + last_name, \
          ", год рождения: " + year_of_birth, \
              ", город проживания: " + city_of_residence,\
                 ", email: " + email, ", телефон: " + phone)
Notebook()

#####################################################################
# 3. Реализовать функцию my_func(), которая принимает три позиционных 
# аргумента и возвращает сумму наибольших двух аргументов.
def sum_two_max_num(*arg):
    arg = []
    for i in range(3):
        w = float(input('Введите число... '))
        arg.append(w)
    arg.sort(); arg.reverse()
    s_2_max = sum(arg[:2])
    print(s_2_max)
    
sum_two_max_num ()

#####################################################################
# 4. Программа принимает действительное положительное число x и целое 
# отрицательное число y. Выполните возведение числа x в степень y. 
# Задание реализуйте в виде функции my_func(x, y). 
# При решении задания нужно обойтись без встроенной функции возведения 
# числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. 
# Первый — возведение в степень с помощью оператора **. 
# Второй — более сложная реализация без оператора **, 
# предусматривающая использование цикла.

def degree_of(r, z):
    
    degree_of_result = r ** z
    print(degree_of_result)
r = float(input('Введите действительное положительное число... '))
z = int(input('Введите целое отрицательное число... '))
degree_of(r, z)

####################################################################
# 5. Программа запрашивает у пользователя строку чисел, 
# разделённых пробелом. При нажатии Enter должна выводиться сумма чисел. 
# Пользователь может продолжить ввод чисел, разделённых пробелом и снова 
# нажать Enter. Сумма вновь введённых чисел будет добавляться к уже 
# подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы 
# завершается. Если специальный символ введён после нескольких чисел, 
# то вначале нужно добавить сумму этих чисел к полученной ранее сумме и 
# после этого завершить программу.
def sum_str_num():
    a = 0    
    arg_cycle = []
    while a != 1:
        primary_data = input('Введите строку чисел разделенных пробелом... ')
        str_data = primary_data.split()        
        for i in range(len(str_data)):
            try:
                var1 = int(str_data[i])
            except ValueError:
                a = 1
                break
            arg_cycle.append(var1)
        print('Сумма чисел',sum(arg_cycle))
    
sum_str_num()


# 6. Реализовать функцию int_func(), принимающую слова из маленьких 
# латинских букв и возвращающую их же, но с прописной первой буквой. 
# Например, print(int_func(‘text’)) -> Text.
def upp_reg(pr_dt):
    pr_dt = pr_dt.capitalize()    
    return pr_dt

pr_dt = input('Введите cлово... ')
print(upp_reg(pr_dt))

# 7. Продолжить работу над заданием. В программу должна попадать строка из 
# слов, разделённых пробелом. Каждое слово состоит из латинских букв 
# в нижнем регистре. Нужно сделать вывод исходной строки, 
# но каждое слово должно начинаться с заглавной буквы. 
# Используйте написанную ранее функцию int_func().
def upp_reg(pr_dt):
    pr_dt = pr_dt.capitalize()    
    return pr_dt

pr_dt2 = input('Введите текст... ')
dt_lst = pr_dt2.split()
dt_lst2 = [] 
for i in range(len(dt_lst)):
    pr_dt = dt_lst[i]
    pr_dt = upp_reg(pr_dt)
    dt_lst2.append(pr_dt)
print(' '.join(dt_lst2))
